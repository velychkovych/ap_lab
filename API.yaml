openapi: 3.0.1
info:
  title: Article service
  description: This is a documentation to API of article service.
  version: 1.0.0
tags:
- name: user
  description: Operations about user
- name: article
  description: Operations about articles
- name: modification
  description: Operations with modifications(can be used only by admins)
paths:
  /user/signup:
    post:
      tags:
      - user
      summary: Sign up user
      description: Creates a new user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
  /user/signin:
    get:
      tags:
      - user
      summary: Signs in user into the system
      operationId: signInUser
      parameters:
      - name: email
        in: query
        description: The email for sign in
        required: true
        schema:
          type: string
          format: email
      - name: password
        in: query
        description: The password for sign in in clear text
        required: true
        schema:
          type: string
          format: password
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid email/password supplied
  /user/signout:
    get:
      tags:
      - user
      summary: Signs out current logged in user session
      operationId: signoutUser
      responses:
        200:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by username
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /article:
    get:
      tags:
      - article
      summary: Watch all the articles
      description: It can be done by everyone.
      operationId: watchAll
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user
            - regular:user
    post:
      tags:
      - article
      summary: Create article
      description: It can be done by logged in users
      operationId: createArticle
      requestBody:
        description: Created article object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user
            - regular:user
          
  /article/:
    post:
      tags:
      - modification
      summary: Create modification
      description: It can be done by logged in users
      operationId: createModification
      requestBody:
        description: Created modification object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Modification'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user
            - regular:user
    put:
      tags:
      - article
      summary: Updated article
      description: This can only be done by the logged in user.
      operationId: updateArticle
      parameters:
      - name: articleid
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - article
      summary: Delete article
      description: This can only be done by the moderator or author
      operationId: deleteArticle
      parameters:
      - name: articleid
        in: path
        description: The article that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid id supplied
        404:
          description: Article not found
      security:
        - articleService_auth:
            - admin:user
            - regular:user


  /article/modification:
    get:
      tags:
      - modification
      summary: Watch all the versions of article.
      description: It can be done by moderators.
      operationId: watchModifies
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user

  /article/modification/{articleid}:
    get:
      tags:
      - modification
      summary: Watch the list of modifications of particular article
      description: It can be done only by moderators.
      parameters:
      - name: articleid
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user

  /article/modification/{modificationid}:
    get:
      tags:
      - modification
      summary: Watch the particular modification
      description: It can be done only by moderators.
      parameters:
      - name: modificationid
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
      security:
        - articleService_auth:
            - admin:user
    delete:
      tags:
      - modification
      summary: Delete modification
      description: This can only be done by the moderator
      operationId: deleteModification
      parameters:
      - name: modificationid
        in: path
        description: The modification that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid id supplied
        404:
          description: Modification not found
      security:
        - articleService_auth:
            - admin:user
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        username:
          type: string
        dateOfRegistration:
          type: string
          format: date
        userStatus:
          type: string
          enum:
            - regular
            - admin
        articles:
          type: array
          items: 
            $ref: '#/components/schemas/Article'
      xml:
        name: User
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        header:
          type: string
        text:
          type: string
          maxLength: 2000
        author:
          $ref: '#/components/schemas/User'
        
    Modification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        header:
          type: string
        text:
          type: string
          maxLength: 2000
        author:
          $ref: '#/components/schemas/User'
        prevVersion:
          $ref: '#/components/schemas/Article'
        
  securitySchemes:
    articleService_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://goodstore.swagger.io/oauth/dialog'
          scopes:
            admin:user : admin rights
            regular:user : regular user rights
            
    api_key:
      type: apiKey
      name: api_key
      in: header